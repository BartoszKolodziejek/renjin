/**
 * Renjin : JVM-based interpreter for the R language for the statistical analysis
 * Copyright Â© 2010-2016 BeDataDriven Groep B.V. and contributors
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, a copy is available at
 * https://www.gnu.org/licenses/gpl-2.0.txt
 */
package org.renjin.gcc;

import org.renjin.gcc.gimple.GimpleCompilationUnit;
import org.renjin.repackaged.guava.io.Files;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Collections;

/**
 * Tests GCC against random C programs generated by Csmith
 */
public class CsmithDriver {

  private final Gcc gcc;
  private File workingDir;
  private int nextTestId = 1;

  public CsmithDriver() throws IOException {
    workingDir = Files.createTempDir();
    gcc = new Gcc(workingDir);
    gcc.addIncludeDirectory(new File("/usr/local/include/csmith-2.3.0"));
    gcc.extractPlugin();
  }

  public void run() throws Exception {
    System.out.println("Working directory: " + workingDir);
    nextTest();
  }

  private void nextTest() throws Exception {
    int testId = nextTestId++;
    File sourceFile = generateSource(testId);

    GimpleCompilationUnit unit = gcc.compileToGimple(sourceFile);
    GimpleCompiler compiler = new GimpleCompiler();
    compiler.setClassName("Test" + testId);
    compiler.setOutputDirectory(workingDir);
    compiler.compile(Collections.singletonList(unit));

    Class<?> testClass = Class.forName("Test" + testId);
    Method mainMethod = findMainMethod(testClass);

    mainMethod.invoke(null);
  }

  private Method findMainMethod(Class<?> compiledClass) {
    for (Method method : compiledClass.getMethods()) {
      if(method.getName().equals("main")) {
        return method;
      }
    }
    throw new IllegalStateException("No main method found");
  }

  private File generateSource(int testId) throws IOException, InterruptedException {
    File sourceFile = new File(workingDir, "test" + testId + ".c");
    int exitCode = new ProcessBuilder("csmith")
        .directory(workingDir)
        .redirectOutput(sourceFile)
        .start()
        .waitFor();

    if(exitCode != 0) {
      throw new RuntimeException("Exit code: " + exitCode);
    }
    return sourceFile;
  }


  public static void main(String[] args) throws Exception {

    CsmithDriver driver = new CsmithDriver();
    driver.run();

  }
}
